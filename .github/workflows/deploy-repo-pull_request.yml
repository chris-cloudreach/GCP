---
    # TODO
    # Currently this workflow has a behaviour to not run terraform apply if the
    # plan shows any resources being destroyed or updated as a safety feature but
    # this should be reworked as we'll likely need to do this in the future

name: No Deploy
on:
  workflow_dispatch:
    paths-ignore:
      - 'PEH/**'
  pull_request:
    paths-ignore:
      - 'PEH/**'
  pull_request_review:
    types: [submitted, edited]
    paths-ignore:
      - 'PEH/**'

permissions:
  contents: read
  id-token: write
  pull-requests: write
  issues: write

jobs:
  terraform-automation:
    name: Terraform Automation
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3



      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform init
        id: init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -out tfplan.json
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        continue-on-error: true

      - name: Terraform plan output
        id: plan_output
        run: terraform show tfplan.json -no-color
        continue-on-error: true

      - name: Terraform plan check
        id: plan_check
        shell: bash
        run: |
          if [[ $(terraform show tfplan.json -no-color | grep 'be destroyed\|be updated') != "" ]]; then
            echo "PLAN_CHECK=UPDATE_DESTROY" >>"$GITHUB_OUTPUT"
            echo "PR_MESSAGE=Terraform plan shows apply or destroy - cannot apply automatically" >>"$GITHUB_OUTPUT"
            echo "Terraform plan shows resources being updated or destroyed"
          elif [[ $(terraform show tfplan.json -no-color | grep 'be created') != "" ]]; then
            echo "PLAN_CHECK=CREATE" >>"$GITHUB_OUTPUT"
            echo "PR_MESSAGE=Terraform plan shows create only - will apply automatically" >>"$GITHUB_OUTPUT"
            echo "Terraform plan shows resources being created only"
          else
            echo "PLAN_CHECK=CLEAR" >>"$GITHUB_OUTPUT"
            echo "PR_MESSAGE=Terraform plan shows no resources being created updated or deleted" >>"$GITHUB_OUTPUT"
            echo "Terraform plan shows no resources being created, updated or deleted"
          fi

      # - name: Add sticky PR comment
      #   id: pr_comment_sticky
      #   uses: mshick/add-pr-comment@v2
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: ${{ steps.plan_output.outputs.stdout }}
      #     GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
      #   with:
      #     message: |
      #       #### Terraform Automated Plan ðŸ“– ${{ steps.plan_output.outcome }}
      #       <details><summary>Show Plan (Current Status of Pull Request)</summary>

      #       ```terraform
      #       ${{ env.PLAN }}
      #       ```

      #       </details>

      # - name: Terraform plan status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Check if updating repos and PR not approved or using main
      #   if: contains(steps.plan_check.outputs.PLAN_CHECK, 'UPDATE_DESTROY') && github.event.review.state != 'approved' && github.ref != 'refs/heads/main'
      #   run: exit 0

      # # - name: Terraform apply
      # #   if: github.event.review.state == 'approved' || github.ref == 'refs/heads/main'
      # #   id: apply
      # #   run: terraform apply -auto-approve -input=false tfplan.json -no-color
      # #   env:
      # #     GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      # # - name: Add/update comment to the PR with the Apply output
      # #   id: pr_comment_apply
      # #   if: github.event_name == 'pull_request_review' && steps.apply.outcome == 'success'
      # #   uses: mshick/add-pr-comment@v2
      # #   env:
      # #     GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
      # #     PLAN: ${{ steps.plan_output.outputs.stdout }}
      # #     APPLY: ${{ steps.apply.outputs.stdout }}
      # #   with:
      # #     allow-repeats: true
      # #     message: |
      # #       #### Terraform Automated Apply ðŸ“– ${{ steps.apply.outcome }}
      # #       <details><summary>Show Original Plan</summary>

      # #       ```terraform
      # #       ${{ env.PLAN }}
      # #       ```

      # #       </details>
      # #       <details><summary>Show Apply Output</summary>

      # #       ```terraform
      # #       ${{ env.APPLY }}
      # #       ```

      # #       </details>
